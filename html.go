// Package main do not edit, this file was autogenerated.
package main

import tags "github.com/Nevoral/LuxeGoUI/Tags"

/*
DOCTYPE - DOCTYPEs are required for legacy reasons. When omitted, browsers tend to use a different rendering mode that is incompatible with some specifications. Including the DOCTYPE in a document ensures that the browser makes a best-effort attempt at following the relevant specifications.
DOCTYPEs are required for legacy reasons. When omitted, browsers tend to use a different rendering mode that is incompatible with some specifications. Including the DOCTYPE in a document ensures that the browser makes a best-effort attempt at following the relevant specifications.
*/
func DOCTYPE() *tags.DOCTYPETagHtml {
	return tags.DOCTYPEHtml()
}

/*
Comment -
*/
func Comment(comment string) *tags.CommentTagHtml {
	return tags.CommentHtml(comment)
}

/*
A - HTML element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.
HTML element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.

Content within each <a> should indicate the link's destination. If the href attribute is present, pressing the enter key while focused on the <a> element will activate it.
*/
func A(content ...any) *tags.ATagHtml {
	return tags.AHtml(content)
}

/*
Abbr - The <abbr> HTML element represents an abbreviation or acronym.
The <abbr> HTML element represents an abbreviation or acronym.

When including an abbreviation or acronym, provide a full expansion of the term in plain text on first use, along with the <abbr> to mark up the abbreviation. This informs the user what the abbreviation or acronym means.

The optional title attribute can provide an expansion for the abbreviation or acronym when a full expansion is not present. This provides a hint to user agents on how to announce/display the content while informing all users what the abbreviation means. If present, title must contain this full description and nothing else.
*/
func Abbr(content ...any) *tags.AbbrTagHtml {
	return tags.AbbrHtml(content)
}

/*
Address - The <address> HTML element indicates that the enclosed HTML provides contact information for a person or people, or for an organization.
The <address> HTML element indicates that the enclosed HTML provides contact information for a person or people, or for an organization.
*/
func Address(content ...any) *tags.AddressTagHtml {
	return tags.AddressHtml(content)
}

/*
Area - The <area> HTML element defines an area inside an image map that has predefined clickable areas. An image map allows geometric areas on an image to be associated with hypertext links.
The <area> HTML element defines an area inside an image map that has predefined clickable areas. An image map allows geometric areas on an image to be associated with hypertext links.

This element is used only within a <map> element.
*/
func Area() *tags.AreaTagHtml {
	return tags.AreaHtml()
}

/*
Article - The <article> HTML element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.
The <article> HTML element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.
*/
func Article(content ...any) *tags.ArticleTagHtml {
	return tags.ArticleHtml(content)
}

/*
Aside - The <aside> HTML element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes.
The <aside> HTML element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes.
*/
func Aside(content ...any) *tags.AsideTagHtml {
	return tags.AsideHtml(content)
}

/*
Audio - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio
*/
func Audio(content ...any) *tags.AudioTagHtml {
	return tags.AudioHtml(content)
}

/*
B -
*/
func B(content ...any) *tags.BTagHtml {
	return tags.BHtml(content)
}

/*
Base -
*/
func Base() *tags.BaseTagHtml {
	return tags.BaseHtml()
}

/*
Bdi -
*/
func Bdi(content ...any) *tags.BdiTagHtml {
	return tags.BdiHtml(content)
}

/*
Bdo -
*/
func Bdo(content ...any) *tags.BdoTagHtml {
	return tags.BdoHtml(content)
}

/*
Blockquote -
*/
func Blockquote(content ...any) *tags.BlockquoteTagHtml {
	return tags.BlockquoteHtml(content)
}

/*
Body -
*/
func Body(content ...any) *tags.BodyTagHtml {
	return tags.BodyHtml(content)
}

/*
Br -
*/
func Br() *tags.BrTagHtml {
	return tags.BrHtml()
}

/*
Button -
*/
func Button(content ...any) *tags.ButtonTagHtml {
	return tags.ButtonHtml(content)
}

/*
Canvas -
*/
func Canvas(content ...any) *tags.CanvasTagHtml {
	return tags.CanvasHtml(content)
}

/*
Caption -
*/
func Caption(content ...any) *tags.CaptionTagHtml {
	return tags.CaptionHtml(content)
}

/*
Cite -
*/
func Cite(content ...any) *tags.CiteTagHtml {
	return tags.CiteHtml(content)
}

/*
Code -
*/
func Code(content ...any) *tags.CodeTagHtml {
	return tags.CodeHtml(content)
}

/*
Col -
*/
func Col() *tags.ColTagHtml {
	return tags.ColHtml()
}

/*
Colgroup -
*/
func Colgroup(content ...any) *tags.ColgroupTagHtml {
	return tags.ColgroupHtml(content)
}

/*
Data -
*/
func Data(content ...any) *tags.DataTagHtml {
	return tags.DataHtml(content)
}

/*
Datalist -
*/
func Datalist(content ...any) *tags.DatalistTagHtml {
	return tags.DatalistHtml(content)
}

/*
Dd -
*/
func Dd(content ...any) *tags.DdTagHtml {
	return tags.DdHtml(content)
}

/*
Del -
*/
func Del(content ...any) *tags.DelTagHtml {
	return tags.DelHtml(content)
}

/*
Details -
*/
func Details(content ...any) *tags.DetailsTagHtml {
	return tags.DetailsHtml(content)
}

/*
Dfn -
*/
func Dfn(content ...any) *tags.DfnTagHtml {
	return tags.DfnHtml(content)
}

/*
Dialog -
*/
func Dialog(content ...any) *tags.DialogTagHtml {
	return tags.DialogHtml(content)
}

/*
Div -
*/
func Div(content ...any) *tags.DivTagHtml {
	return tags.DivHtml(content)
}

/*
Dl -
*/
func Dl(content ...any) *tags.DlTagHtml {
	return tags.DlHtml(content)
}

/*
Dt -
*/
func Dt(content ...any) *tags.DtTagHtml {
	return tags.DtHtml(content)
}

/*
Em -
*/
func Em(content ...any) *tags.EmTagHtml {
	return tags.EmHtml(content)
}

/*
Embed -
*/
func Embed() *tags.EmbedTagHtml {
	return tags.EmbedHtml()
}

/*
Fieldset -
*/
func Fieldset(content ...any) *tags.FieldsetTagHtml {
	return tags.FieldsetHtml(content)
}

/*
Figcaption -
*/
func Figcaption(content ...any) *tags.FigcaptionTagHtml {
	return tags.FigcaptionHtml(content)
}

/*
Figure -
*/
func Figure(content ...any) *tags.FigureTagHtml {
	return tags.FigureHtml(content)
}

/*
Footer -
*/
func Footer(content ...any) *tags.FooterTagHtml {
	return tags.FooterHtml(content)
}

/*
Form -
*/
func Form(content ...any) *tags.FormTagHtml {
	return tags.FormHtml(content)
}

/*
H1 -
*/
func H1(content ...any) *tags.H1TagHtml {
	return tags.H1Html(content)
}

/*
H2 -
*/
func H2(content ...any) *tags.H2TagHtml {
	return tags.H2Html(content)
}

/*
H3 -
*/
func H3(content ...any) *tags.H3TagHtml {
	return tags.H3Html(content)
}

/*
H4 -
*/
func H4(content ...any) *tags.H4TagHtml {
	return tags.H4Html(content)
}

/*
H5 -
*/
func H5(content ...any) *tags.H5TagHtml {
	return tags.H5Html(content)
}

/*
H6 -
*/
func H6(content ...any) *tags.H6TagHtml {
	return tags.H6Html(content)
}

/*
Head -
*/
func Head(content ...any) *tags.HeadTagHtml {
	return tags.HeadHtml(content)
}

/*
Header -
*/
func Header(content ...any) *tags.HeaderTagHtml {
	return tags.HeaderHtml(content)
}

/*
Hgroup -
*/
func Hgroup(content ...any) *tags.HgroupTagHtml {
	return tags.HgroupHtml(content)
}

/*
Hr -
*/
func Hr() *tags.HrTagHtml {
	return tags.HrHtml()
}

/*
Html -
*/
func Html(content ...any) *tags.HtmlTagHtml {
	return tags.HtmlHtml(content)
}

/*
I -
*/
func I(content ...any) *tags.ITagHtml {
	return tags.IHtml(content)
}

/*
Iframe -
*/
func Iframe(content ...any) *tags.IframeTagHtml {
	return tags.IframeHtml(content)
}

/*
Img -
*/
func Img() *tags.ImgTagHtml {
	return tags.ImgHtml()
}

/*
Input -
*/
func Input() *tags.InputTagHtml {
	return tags.InputHtml()
}

/*
Ins -
*/
func Ins(content ...any) *tags.InsTagHtml {
	return tags.InsHtml(content)
}

/*
Kbd -
*/
func Kbd(content ...any) *tags.KbdTagHtml {
	return tags.KbdHtml(content)
}

/*
Label -
*/
func Label(content ...any) *tags.LabelTagHtml {
	return tags.LabelHtml(content)
}

/*
Legend -
*/
func Legend(content ...any) *tags.LegendTagHtml {
	return tags.LegendHtml(content)
}

/*
Li -
*/
func Li(content ...any) *tags.LiTagHtml {
	return tags.LiHtml(content)
}

/*
Link -
*/
func Link() *tags.LinkTagHtml {
	return tags.LinkHtml()
}

/*
Main -
*/
func Main(content ...any) *tags.MainTagHtml {
	return tags.MainHtml(content)
}

/*
Map -
*/
func Map(content ...any) *tags.MapTagHtml {
	return tags.MapHtml(content)
}

/*
Mark -
*/
func Mark(content ...any) *tags.MarkTagHtml {
	return tags.MarkHtml(content)
}

/*
Menu -
*/
func Menu(content ...any) *tags.MenuTagHtml {
	return tags.MenuHtml(content)
}

/*
Meta -
*/
func Meta() *tags.MetaTagHtml {
	return tags.MetaHtml()
}

/*
Meter -
*/
func Meter(content ...any) *tags.MeterTagHtml {
	return tags.MeterHtml(content)
}

/*
Nav -
*/
func Nav(content ...any) *tags.NavTagHtml {
	return tags.NavHtml(content)
}

/*
Noscript -
*/
func Noscript(content ...any) *tags.NoscriptTagHtml {
	return tags.NoscriptHtml(content)
}

/*
Object -
*/
func Object(content ...any) *tags.ObjectTagHtml {
	return tags.ObjectHtml(content)
}

/*
Ol -
*/
func Ol(content ...any) *tags.OlTagHtml {
	return tags.OlHtml(content)
}

/*
Optgroup -
*/
func Optgroup(content ...any) *tags.OptgroupTagHtml {
	return tags.OptgroupHtml(content)
}

/*
Option -
*/
func Option(content ...any) *tags.OptionTagHtml {
	return tags.OptionHtml(content)
}

/*
Output -
*/
func Output(content ...any) *tags.OutputTagHtml {
	return tags.OutputHtml(content)
}

/*
P -
*/
func P(content ...any) *tags.PTagHtml {
	return tags.PHtml(content)
}

/*
Picture -
*/
func Picture(content ...any) *tags.PictureTagHtml {
	return tags.PictureHtml(content)
}

/*
Portal -
*/
func Portal(content ...any) *tags.PortalTagHtml {
	return tags.PortalHtml(content)
}

/*
Pre -
*/
func Pre(content ...any) *tags.PreTagHtml {
	return tags.PreHtml(content)
}

/*
Progress -
*/
func Progress(content ...any) *tags.ProgressTagHtml {
	return tags.ProgressHtml(content)
}

/*
Q -
*/
func Q(content ...any) *tags.QTagHtml {
	return tags.QHtml(content)
}

/*
Rp -
*/
func Rp(content ...any) *tags.RpTagHtml {
	return tags.RpHtml(content)
}

/*
Rt -
*/
func Rt(content ...any) *tags.RtTagHtml {
	return tags.RtHtml(content)
}

/*
Ruby -
*/
func Ruby(content ...any) *tags.RubyTagHtml {
	return tags.RubyHtml(content)
}

/*
S -
*/
func S(content ...any) *tags.STagHtml {
	return tags.SHtml(content)
}

/*
Samp -
*/
func Samp(content ...any) *tags.SampTagHtml {
	return tags.SampHtml(content)
}

/*
Script -
*/
func Script(content ...any) *tags.ScriptTagHtml {
	return tags.ScriptHtml(content)
}

/*
Search -
*/
func Search(content ...any) *tags.SearchTagHtml {
	return tags.SearchHtml(content)
}

/*
Section -
*/
func Section(content ...any) *tags.SectionTagHtml {
	return tags.SectionHtml(content)
}

/*
Select -
*/
func Select(content ...any) *tags.SelectTagHtml {
	return tags.SelectHtml(content)
}

/*
Slot -
*/
func Slot(content ...any) *tags.SlotTagHtml {
	return tags.SlotHtml(content)
}

/*
Small -
*/
func Small(content ...any) *tags.SmallTagHtml {
	return tags.SmallHtml(content)
}

/*
Source -
*/
func Source() *tags.SourceTagHtml {
	return tags.SourceHtml()
}

/*
Span -
*/
func Span(content ...any) *tags.SpanTagHtml {
	return tags.SpanHtml(content)
}

/*
Strong -
*/
func Strong(content ...any) *tags.StrongTagHtml {
	return tags.StrongHtml(content)
}

/*
Style -
*/
func Style(content ...any) *tags.StyleTagHtml {
	return tags.StyleHtml(content)
}

/*
Sub -
*/
func Sub(content ...any) *tags.SubTagHtml {
	return tags.SubHtml(content)
}

/*
Summary -
*/
func Summary(content ...any) *tags.SummaryTagHtml {
	return tags.SummaryHtml(content)
}

/*
Sup -
*/
func Sup(content ...any) *tags.SupTagHtml {
	return tags.SupHtml(content)
}

/*
Svg -
*/
func Svg(content ...any) *tags.SvgTagHtml {
	return tags.SvgHtml(content)
}

/*
Table -
*/
func Table(content ...any) *tags.TableTagHtml {
	return tags.TableHtml(content)
}

/*
Tbody -
*/
func Tbody(content ...any) *tags.TbodyTagHtml {
	return tags.TbodyHtml(content)
}

/*
Td -
*/
func Td(content ...any) *tags.TdTagHtml {
	return tags.TdHtml(content)
}

/*
Template -
*/
func Template(content ...any) *tags.TemplateTagHtml {
	return tags.TemplateHtml(content)
}

/*
Textarea -
*/
func Textarea(content ...any) *tags.TextareaTagHtml {
	return tags.TextareaHtml(content)
}

/*
Tfoot -
*/
func Tfoot(content ...any) *tags.TfootTagHtml {
	return tags.TfootHtml(content)
}

/*
Th -
*/
func Th(content ...any) *tags.ThTagHtml {
	return tags.ThHtml(content)
}

/*
Thead -
*/
func Thead(content ...any) *tags.TheadTagHtml {
	return tags.TheadHtml(content)
}

/*
Time -
*/
func Time(content ...any) *tags.TimeTagHtml {
	return tags.TimeHtml(content)
}

/*
Title -
*/
func Title(content ...any) *tags.TitleTagHtml {
	return tags.TitleHtml(content)
}

/*
Tr -
*/
func Tr(content ...any) *tags.TrTagHtml {
	return tags.TrHtml(content)
}

/*
Track -
*/
func Track() *tags.TrackTagHtml {
	return tags.TrackHtml()
}

/*
U -
*/
func U(content ...any) *tags.UTagHtml {
	return tags.UHtml(content)
}

/*
Ul -
*/
func Ul(content ...any) *tags.UlTagHtml {
	return tags.UlHtml(content)
}

/*
Var -
*/
func Var(content ...any) *tags.VarTagHtml {
	return tags.VarHtml(content)
}

/*
Video -
*/
func Video(content ...any) *tags.VideoTagHtml {
	return tags.VideoHtml(content)
}

/*
Wbr -
*/
func Wbr() *tags.WbrTagHtml {
	return tags.WbrHtml()
}
