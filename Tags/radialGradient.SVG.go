// Package tags do not edit, this file was autogenerated.
package tags

import (
	"fmt"
	spec "github.com/Nevoral/LuxeGoUI/Specification"
)

func RadialGradientSvg(tags []any) *RadialGradientTagSvg {
	node := &RadialGradientTagSvg{
		tag: &tag{
			name:                "radialGradient",
			attributes:          nil,
			supportedAttributes: nil,
			tagType:             spec.FullTagType,
			namespace:           spec.SVG,
			children:            nil,
			textContent:         "",
			parent:              nil,
			nestingLevel:        0,
			renderFormat:        DefaultHtml,
		},
	}
	return node.supportedChildrenCheck(tags)
}

type RadialGradientTagSvg struct {
	*tag
}

/*
************************************************************************************************************************
*-------------------------------------------------- Extension Method --------------------------------------------------*
************************************************************************************************************************
 */

/*
CustomAttribute - This is method for adding custom attribute, that are not in HTML5 specification.
*/
func (r *RadialGradientTagSvg) CustomAttribute(attributes ...*Attribute) *RadialGradientTagSvg {
	r.registerAttributes(attributes...)
	return r
}

/*
Children - Method for nesting tags into parent tag
*/
func (r *RadialGradientTagSvg) Children(tags ...any) *RadialGradientTagSvg {
	return r.supportedChildrenCheck(tags)
}

func (r *RadialGradientTagSvg) supportedChildrenCheck(tags []any) *RadialGradientTagSvg {
	for _, tagObj := range tags {
		switch val := tagObj.(type) {
		case string:
			r.registerChildren(TextContentSvg(val).getTag())
		case content:
			r.registerChildren(val.getTag())
		case []content:
			for _, child := range val {
				r.registerChildren(child.getTag())
			}
		default:
			panic(fmt.Sprintf("Unsupported content type. %v", val))
		}
	}
	return r
}

/*
************************************************************************************************************************
*------------------------------------------------ Specific Attributes -------------------------------------------------*
************************************************************************************************************************
 */

/*
Cx -
*/
func (r *RadialGradientTagSvg) Cx(value string) *RadialGradientTagSvg {
	if r.attributes == nil {
		r.attributes = []*Attribute{}
	}
	r.registerAttribute("cx", value)
	return r
}

/*
Cy -
*/
func (r *RadialGradientTagSvg) Cy(value string) *RadialGradientTagSvg {
	if r.attributes == nil {
		r.attributes = []*Attribute{}
	}
	r.registerAttribute("cy", value)
	return r
}

/*
Fr -
*/
func (r *RadialGradientTagSvg) Fr(value string) *RadialGradientTagSvg {
	if r.attributes == nil {
		r.attributes = []*Attribute{}
	}
	r.registerAttribute("fr", value)
	return r
}

/*
Fx -
*/
func (r *RadialGradientTagSvg) Fx(value string) *RadialGradientTagSvg {
	if r.attributes == nil {
		r.attributes = []*Attribute{}
	}
	r.registerAttribute("fx", value)
	return r
}

/*
Fy -
*/
func (r *RadialGradientTagSvg) Fy(value string) *RadialGradientTagSvg {
	if r.attributes == nil {
		r.attributes = []*Attribute{}
	}
	r.registerAttribute("fy", value)
	return r
}

/*
GradientTransform -
*/
func (r *RadialGradientTagSvg) GradientTransform(value string) *RadialGradientTagSvg {
	if r.attributes == nil {
		r.attributes = []*Attribute{}
	}
	r.registerAttribute("gradientTransform", value)
	return r
}

/*
GradientUnits -
*/
func (r *RadialGradientTagSvg) GradientUnits(value string) *RadialGradientTagSvg {
	if r.attributes == nil {
		r.attributes = []*Attribute{}
	}
	r.registerAttribute("gradientUnits", value)
	return r
}

/*
R -
*/
func (r *RadialGradientTagSvg) R(value string) *RadialGradientTagSvg {
	if r.attributes == nil {
		r.attributes = []*Attribute{}
	}
	r.registerAttribute("r", value)
	return r
}

/*
SpreadMethod -
*/
func (r *RadialGradientTagSvg) SpreadMethod(value string) *RadialGradientTagSvg {
	if r.attributes == nil {
		r.attributes = []*Attribute{}
	}
	r.registerAttribute("spreadMethod", value)
	return r
}
