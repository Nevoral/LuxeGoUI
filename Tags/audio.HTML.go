// Package tags do not edit, this file was autogenerated.
package tags

import (
	"fmt"
	spec "github.com/Nevoral/LuxeGoUI/Specification"
)

func AudioHtml(tags []any) *AudioTagHtml {
	node := &AudioTagHtml{
		tag: &tag{
			name:                "audio",
			attributes:          nil,
			supportedAttributes: nil,
			tagType:             spec.FullTagType,
			namespace:           spec.HTML,
			children:            nil,
			textContent:         "",
			parent:              nil,
			nestingLevel:        0,
			renderFormat:        DefaultHtml,
		},
	}
	return node.supportedChildrenCheck(tags)
}

type AudioTagHtml struct {
	*tag
}

/*
************************************************************************************************************************
*-------------------------------------------------- Extension Method --------------------------------------------------*
************************************************************************************************************************
 */

/*
CustomAttribute - This is method for adding custom attribute, that are not in HTML5 specification.
*/
func (a *AudioTagHtml) CustomAttribute(attributes ...*Attribute) *AudioTagHtml {
	a.registerAttributes(attributes...)
	return a
}

/*
Children - Method for nesting tags into parent tag
*/
func (a *AudioTagHtml) Children(tags ...any) *AudioTagHtml {
	return a.supportedChildrenCheck(tags)
}

func (a *AudioTagHtml) supportedChildrenCheck(tags []any) *AudioTagHtml {
	for _, tagObj := range tags {
		switch val := tagObj.(type) {
		case string:
			a.registerChildren(TextContentSvg(val).getTag())
		case content:
			a.registerChildren(val.getTag())
		case []content:
			for _, child := range val {
				a.registerChildren(child.getTag())
			}
		default:
			panic(fmt.Sprintf("Unsupported content type. %v", val))
		}
	}
	return a
}

/*
************************************************************************************************************************
*------------------------------------------------ Specific Attributes -------------------------------------------------*
************************************************************************************************************************
 */

/*
Autoplay - A Boolean attribute: if specified, the audio will automatically begin playback as soon as it can do so, without waiting for the entire audio file to finish downloading.
A Boolean attribute: if specified, the audio will automatically begin playback as soon as it can do so, without waiting for the entire audio file to finish downloading.

	Note: Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control. See our autoplay guide for additional information about how to properly use autoplay.
*/
func (a *AudioTagHtml) Autoplay() *AudioTagHtml {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("autoplay", "")
	return a
}

/*
Controls - If this attribute is present, the browser will offer controls to allow the user to control audio playback, including volume, seeking, and pause/resume playback.
If this attribute is present, the browser will offer controls to allow the user to control audio playback, including volume, seeking, and pause/resume playback.
*/
func (a *AudioTagHtml) Controls() *AudioTagHtml {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("controls", "")
	return a
}

/*
Controlslist - The controlslist attribute, when specified, helps the browser select what controls to show for the audio element whenever the browser shows its own set of controls (that is, when the controls attribute is specified).
The controlslist attribute, when specified, helps the browser select what controls to show for the audio element whenever the browser shows its own set of controls (that is, when the controls attribute is specified).

	The allowed values are nodownload, nofullscreen and noremoteplayback.
*/
func (a *AudioTagHtml) Controlslist(value string) *AudioTagHtml {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("controlslist", value)
	return a
}

/*
Crossorigin - This enumerated attribute indicates whether to use CORS to fetch the related audio file. CORS-enabled resources can be reused in the <canvas> element without being tainted. The allowed values are:
This enumerated attribute indicates whether to use CORS to fetch the related audio file. CORS-enabled resources can be reused in the <canvas> element without being tainted. The allowed values are:

	anonymous

	    Sends a cross-origin request without a credential. In other words, it sends the Origin: HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin: HTTP header), the resource will be tainted, and its usage restricted.
	use-credentials

	    Sends a cross-origin request with a credential. In other words, it sends the Origin: HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials: HTTP header), the resource will be tainted and its usage restricted.

	When not present, the resource is fetched without a CORS request (i.e. without sending the Origin: HTTP header), preventing its non-tainted use in <canvas> elements. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information.
*/
func (a *AudioTagHtml) Crossorigin(value string) *AudioTagHtml {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("crossorigin", value)
	return a
}

/*
Disableremoteplayback - A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.). See this proposed specification for more information.
A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.). See this proposed specification for more information.

	In Safari, you can use x-webkit-airplay="deny" as a fallback.
*/
func (a *AudioTagHtml) Disableremoteplayback(value string) *AudioTagHtml {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("disableremoteplayback", value)
	return a
}

/*
Loop - A Boolean attribute: if specified, the audio player will automatically seek back to the start upon reaching the end of the audio.
A Boolean attribute: if specified, the audio player will automatically seek back to the start upon reaching the end of the audio.
*/
func (a *AudioTagHtml) Loop() *AudioTagHtml {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("loop", "")
	return a
}

/*
Muted - A Boolean attribute that indicates whether the audio will be initially silenced. Its default value is false.
A Boolean attribute that indicates whether the audio will be initially silenced. Its default value is false.
*/
func (a *AudioTagHtml) Muted() *AudioTagHtml {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("muted", "")
	return a
}

/*
Preload - This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience. It may have one of the following values:
This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience. It may have one of the following values:

	    none: Indicates that the audio should not be preloaded.
	    metadata: Indicates that only audio metadata (e.g. length) is fetched.
	    auto: Indicates that the whole audio file can be downloaded, even if the user is not expected to use it.
	    empty string: A synonym of the auto value.

	The default value is different for each browser. The spec advises it to be set to metadata.

	Note:

	    The autoplay attribute has precedence over preload. If autoplay is specified, the browser would obviously need to start downloading the audio for playback.
	    The browser is not forced by the specification to follow the value of this attribute; it is a mere hint.
*/
func (a *AudioTagHtml) Preload(value string) *AudioTagHtml {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("preload", value)
	return a
}

/*
Src - The URL of the audio to embed. This is subject to HTTP access controls. This is optional; you may instead use the <source> element within the audio block to specify the audio to embed.
The URL of the audio to embed. This is subject to HTTP access controls. This is optional; you may instead use the <source> element within the audio block to specify the audio to embed.
*/
func (a *AudioTagHtml) Src(value string) *AudioTagHtml {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("src", value)
	return a
}
