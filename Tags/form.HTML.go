// Package tags do not edit, this file was autogenerated.
package tags

import (
	"fmt"
	spec "github.com/Nevoral/LuxeGoUI/Specification"
)

func FormHtml(tags []any) *FormTagHtml {
	node := &FormTagHtml{
		tag: &tag{
			name:                "form",
			attributes:          nil,
			supportedAttributes: nil,
			tagType:             spec.FullTagType,
			namespace:           spec.HTML,
			children:            nil,
			textContent:         "",
			parent:              nil,
			nestingLevel:        0,
			renderFormat:        DefaultHtml,
		},
	}
	return node.supportedChildrenCheck(tags)
}

type FormTagHtml struct {
	*tag
}

/*
************************************************************************************************************************
*-------------------------------------------------- Extension Method --------------------------------------------------*
************************************************************************************************************************
 */

/*
CustomAttribute - This is method for adding custom attribute, that are not in HTML5 specification.
*/
func (f *FormTagHtml) CustomAttribute(attributes ...*Attribute) *FormTagHtml {
	f.registerAttributes(attributes...)
	return f
}

/*
Children - Method for nesting tags into parent tag
*/
func (f *FormTagHtml) Children(tags ...any) *FormTagHtml {
	return f.supportedChildrenCheck(tags)
}

func (f *FormTagHtml) supportedChildrenCheck(tags []any) *FormTagHtml {
	for _, tagObj := range tags {
		switch val := tagObj.(type) {
		case string:
			f.registerChildren(TextContentSvg(val).getTag())
		case content:
			f.registerChildren(val.getTag())
		case []content:
			for _, child := range val {
				f.registerChildren(child.getTag())
			}
		default:
			panic(fmt.Sprintf("Unsupported content type. %v", val))
		}
	}
	return f
}

/*
************************************************************************************************************************
*------------------------------------------------ Specific Attributes -------------------------------------------------*
************************************************************************************************************************
 */

/*
Accept -
*/
func (f *FormTagHtml) Accept(value string) *FormTagHtml {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("accept", value)
	return f
}

/*
AcceptCharset -
*/
func (f *FormTagHtml) AcceptCharset(value string) *FormTagHtml {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("accept-charset", value)
	return f
}

/*
Action -
*/
func (f *FormTagHtml) Action(value string) *FormTagHtml {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("action", value)
	return f
}

/*
Autocomplete -
*/
func (f *FormTagHtml) Autocomplete(value string) *FormTagHtml {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("autocomplete", value)
	return f
}

/*
Enctype -
*/
func (f *FormTagHtml) Enctype(value string) *FormTagHtml {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("enctype", value)
	return f
}

/*
Method -
*/
func (f *FormTagHtml) Method(value string) *FormTagHtml {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("method", value)
	return f
}

/*
Name -
*/
func (f *FormTagHtml) Name(value string) *FormTagHtml {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("name", value)
	return f
}

/*
Novalidate -
*/
func (f *FormTagHtml) Novalidate() *FormTagHtml {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("novalidate", "")
	return f
}

/*
Rel -
*/
func (f *FormTagHtml) Rel(value string) *FormTagHtml {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("rel", value)
	return f
}

/*
Target -
*/
func (f *FormTagHtml) Target(value string) *FormTagHtml {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("target", value)
	return f
}
