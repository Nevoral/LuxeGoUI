// Package tags do not edit, this file was autogenerated.
package tags

import (
	"fmt"
	spec "github.com/Nevoral/LuxeGoUI/Specification"
)

func PatternSvg(tags []any) *PatternTagSvg {
	node := &PatternTagSvg{
		tag: &tag{
			name:                "pattern",
			attributes:          nil,
			supportedAttributes: nil,
			tagType:             spec.FullTagType,
			namespace:           spec.SVG,
			children:            nil,
			textContent:         "",
			parent:              nil,
			nestingLevel:        0,
			renderFormat:        DefaultHtml,
		},
	}
	return node.supportedChildrenCheck(tags)
}

type PatternTagSvg struct {
	*tag
}

/*
************************************************************************************************************************
*-------------------------------------------------- Extension Method --------------------------------------------------*
************************************************************************************************************************
 */

/*
CustomAttribute - This is method for adding custom attribute, that are not in HTML5 specification.
*/
func (p *PatternTagSvg) CustomAttribute(attributes ...*Attribute) *PatternTagSvg {
	p.registerAttributes(attributes...)
	return p
}

/*
Children - Method for nesting tags into parent tag
*/
func (p *PatternTagSvg) Children(tags ...any) *PatternTagSvg {
	return p.supportedChildrenCheck(tags)
}

func (p *PatternTagSvg) supportedChildrenCheck(tags []any) *PatternTagSvg {
	for _, tagObj := range tags {
		switch val := tagObj.(type) {
		case string:
			p.registerChildren(TextContentSvg(val).getTag())
		case content:
			p.registerChildren(val.getTag())
		case []content:
			for _, child := range val {
				p.registerChildren(child.getTag())
			}
		default:
			panic(fmt.Sprintf("Unsupported content type. %v", val))
		}
	}
	return p
}

/*
************************************************************************************************************************
*------------------------------------------------ Specific Attributes -------------------------------------------------*
************************************************************************************************************************
 */

/*
Height -
*/
func (p *PatternTagSvg) Height(value string) *PatternTagSvg {
	if p.attributes == nil {
		p.attributes = []*Attribute{}
	}
	p.registerAttribute("height", value)
	return p
}

/*
PatternContentUnits -
*/
func (p *PatternTagSvg) PatternContentUnits(value string) *PatternTagSvg {
	if p.attributes == nil {
		p.attributes = []*Attribute{}
	}
	p.registerAttribute("patternContentUnits", value)
	return p
}

/*
PatternTransform -
*/
func (p *PatternTagSvg) PatternTransform(value string) *PatternTagSvg {
	if p.attributes == nil {
		p.attributes = []*Attribute{}
	}
	p.registerAttribute("patternTransform", value)
	return p
}

/*
PatternUnits -
*/
func (p *PatternTagSvg) PatternUnits(value string) *PatternTagSvg {
	if p.attributes == nil {
		p.attributes = []*Attribute{}
	}
	p.registerAttribute("patternUnits", value)
	return p
}

/*
PreserveAspectRatio -
*/
func (p *PatternTagSvg) PreserveAspectRatio(value string) *PatternTagSvg {
	if p.attributes == nil {
		p.attributes = []*Attribute{}
	}
	p.registerAttribute("preserveAspectRatio", value)
	return p
}

/*
ViewBox -
*/
func (p *PatternTagSvg) ViewBox(value string) *PatternTagSvg {
	if p.attributes == nil {
		p.attributes = []*Attribute{}
	}
	p.registerAttribute("viewBox", value)
	return p
}

/*
Width -
*/
func (p *PatternTagSvg) Width(value string) *PatternTagSvg {
	if p.attributes == nil {
		p.attributes = []*Attribute{}
	}
	p.registerAttribute("width", value)
	return p
}

/*
X -
*/
func (p *PatternTagSvg) X(value string) *PatternTagSvg {
	if p.attributes == nil {
		p.attributes = []*Attribute{}
	}
	p.registerAttribute("x", value)
	return p
}

/*
Y -
*/
func (p *PatternTagSvg) Y(value string) *PatternTagSvg {
	if p.attributes == nil {
		p.attributes = []*Attribute{}
	}
	p.registerAttribute("y", value)
	return p
}
