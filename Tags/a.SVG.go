// Package tags do not edit, this file was autogenerated.
package tags

import (
	"fmt"
	spec "github.com/Nevoral/LuxeGoUI/Specification"
)

func ASvg(tags []any) *ATagSvg {
	node := &ATagSvg{
		tag: &tag{
			name:                "a",
			attributes:          nil,
			supportedAttributes: nil,
			tagType:             spec.FullTagType,
			namespace:           spec.SVG,
			children:            nil,
			textContent:         "",
			parent:              nil,
			nestingLevel:        0,
			renderFormat:        DefaultHtml,
		},
	}
	return node.supportedChildrenCheck(tags)
}

type ATagSvg struct {
	*tag
}

/*
************************************************************************************************************************
*-------------------------------------------------- Extension Method --------------------------------------------------*
************************************************************************************************************************
 */

/*
CustomAttribute - This is method for adding custom attribute, that are not in HTML5 specification.
*/
func (a *ATagSvg) CustomAttribute(attributes ...*Attribute) *ATagSvg {
	a.registerAttributes(attributes...)
	return a
}

/*
Children - Method for nesting tags into parent tag
*/
func (a *ATagSvg) Children(tags ...any) *ATagSvg {
	return a.supportedChildrenCheck(tags)
}

func (a *ATagSvg) supportedChildrenCheck(tags []any) *ATagSvg {
	for _, tagObj := range tags {
		switch val := tagObj.(type) {
		case string:
			a.registerChildren(TextContentSvg(val).getTag())
		case content:
			a.registerChildren(val.getTag())
		case []content:
			for _, child := range val {
				a.registerChildren(child.getTag())
			}
		default:
			panic(fmt.Sprintf("Unsupported content type. %v", val))
		}
	}
	return a
}

/*
************************************************************************************************************************
*------------------------------------------------ Specific Attributes -------------------------------------------------*
************************************************************************************************************************
 */

/*
Download -
*/
func (a *ATagSvg) Download(value string) *ATagSvg {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("download", value)
	return a
}

/*
Href - The location of the referenced object, expressed as an URL reference. Refer to the common handling defined for URL reference attributes.
The location of the referenced object, expressed as an URL reference. Refer to the common handling defined for URL reference attributes.
*/
func (a *ATagSvg) Href(value string) *ATagSvg {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("href", value)
	return a
}

/*
Hreflang -
*/
func (a *ATagSvg) Hreflang(value string) *ATagSvg {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("hreflang", value)
	return a
}

/*
Ping -
*/
func (a *ATagSvg) Ping(value string) *ATagSvg {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("ping", value)
	return a
}

/*
Referrerpolicy -
*/
func (a *ATagSvg) Referrerpolicy(value string) *ATagSvg {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("referrerpolicy", value)
	return a
}

/*
Rel -
*/
func (a *ATagSvg) Rel(value string) *ATagSvg {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("rel", value)
	return a
}

/*
Target - This attribute should be used when there are multiple possible targets for the ending resource, such as when the parent document is embedded within an HTML or XHTML document, or is viewed with a tabbed browser. This attribute specifies the name of the browsing context (e.g., a browser tab or an (X)HTML iframe or object element) into which a document is to be opened when the link is activated:
This attribute should be used when there are multiple possible targets for the ending resource, such as when the parent document is embedded within an HTML or XHTML document, or is viewed with a tabbed browser. This attribute specifies the name of the browsing context (e.g., a browser tab or an (X)HTML iframe or object element) into which a document is to be opened when the link is activated:

_self

	The current SVG image is replaced by the linked content in the same browsing context as the current SVG image.

_parent

	The immediate parent browsing context of the SVG image is replaced by the linked content, if it exists and can be securely accessed from this document.

_top

	The content of the full active window or tab is replaced by the linked content, if it exists and can be securely accessed from this document

_blank

	A new un-named window or tab is requested for the display of the linked content, if this document can securely do so. If the user agent does not support multiple windows/tabs, the result is the same as _top.

<XML-name>

	Specifies the name of the browsing context (tab, inline frame, object, etc.) for display of the linked content. If a context with this name already exists, and can be securely accessed from this document, it is re-used, replacing the existing content. If it does not exist, it is created (the same as '_blank', except that it now has a name). The name must be a valid XML name [XML11], and should not start with an underscore (U+005F LOW LINE character), to meet the requirements of a valid browsing context name from HTML.
*/
func (a *ATagSvg) Target(value string) *ATagSvg {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("target", value)
	return a
}

/*
Type -
*/
func (a *ATagSvg) Type(value string) *ATagSvg {
	if a.attributes == nil {
		a.attributes = []*Attribute{}
	}
	a.registerAttribute("type", value)
	return a
}
