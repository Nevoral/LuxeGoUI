// Package tags do not edit, this file was autogenerated.
package tags

import spec "github.com/Nevoral/LuxeGoUI/Specification"

func FeBlendSvg() *FeBlendTagSvg {
	return &FeBlendTagSvg{
		tag: &tag{
			name:                "feBlend",
			attributes:          nil,
			supportedAttributes: nil,
			tagType:             spec.SelfClosingType,
			namespace:           spec.SVG,
			children:            nil,
			textContent:         "",
			parent:              nil,
			nestingLevel:        0,
			renderFormat:        DefaultHtml,
		},
	}
}

type FeBlendTagSvg struct {
	*tag
}

/*
************************************************************************************************************************
*-------------------------------------------------- Extension Method --------------------------------------------------*
************************************************************************************************************************
 */

/*
CustomAttribute - This is method for adding custom attribute, that are not in HTML5 specification.
*/
func (f *FeBlendTagSvg) CustomAttribute(attributes ...*Attribute) *FeBlendTagSvg {
	f.registerAttributes(attributes...)
	return f
}

/*
************************************************************************************************************************
*------------------------------------------------ Specific Attributes -------------------------------------------------*
************************************************************************************************************************
 */

/*
In -
*/
func (f *FeBlendTagSvg) In(value string) *FeBlendTagSvg {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("in", value)
	return f
}

/*
In2 -
*/
func (f *FeBlendTagSvg) In2(value string) *FeBlendTagSvg {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("in2", value)
	return f
}

/*
Mode -
*/
func (f *FeBlendTagSvg) Mode(value string) *FeBlendTagSvg {
	if f.attributes == nil {
		f.attributes = []*Attribute{}
	}
	f.registerAttribute("mode", value)
	return f
}
