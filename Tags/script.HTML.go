// Package tags do not edit, this file was autogenerated.
package tags

import (
	"fmt"
	spec "github.com/Nevoral/LuxeGoUI/Specification"
)

func ScriptHtml(tags []any) *ScriptTagHtml {
	node := &ScriptTagHtml{
		tag: &tag{
			name:                "script",
			attributes:          nil,
			supportedAttributes: nil,
			tagType:             spec.FullTagType,
			namespace:           spec.HTML,
			children:            nil,
			textContent:         "",
			parent:              nil,
			nestingLevel:        0,
			renderFormat:        DefaultHtml,
		},
	}
	return node.supportedChildrenCheck(tags)
}

type ScriptTagHtml struct {
	*tag
}

/*
************************************************************************************************************************
*-------------------------------------------------- Extension Method --------------------------------------------------*
************************************************************************************************************************
 */

/*
CustomAttribute - This is method for adding custom attribute, that are not in HTML5 specification.
*/
func (s *ScriptTagHtml) CustomAttribute(attributes ...*Attribute) *ScriptTagHtml {
	s.registerAttributes(attributes...)
	return s
}

/*
Children - Method for nesting tags into parent tag
*/
func (s *ScriptTagHtml) Children(tags ...any) *ScriptTagHtml {
	return s.supportedChildrenCheck(tags)
}

func (s *ScriptTagHtml) supportedChildrenCheck(tags []any) *ScriptTagHtml {
	for _, tagObj := range tags {
		switch val := tagObj.(type) {
		case string:
			s.registerChildren(TextContentSvg(val).getTag())
		case content:
			s.registerChildren(val.getTag())
		case []content:
			for _, child := range val {
				s.registerChildren(child.getTag())
			}
		default:
			panic(fmt.Sprintf("Unsupported content type. %v", val))
		}
	}
	return s
}

/*
************************************************************************************************************************
*------------------------------------------------ Specific Attributes -------------------------------------------------*
************************************************************************************************************************
 */

/*
Async -
*/
func (s *ScriptTagHtml) Async() *ScriptTagHtml {
	if s.attributes == nil {
		s.attributes = []*Attribute{}
	}
	s.registerAttribute("async", "")
	return s
}

/*
Blocking -
*/
func (s *ScriptTagHtml) Blocking(value string) *ScriptTagHtml {
	if s.attributes == nil {
		s.attributes = []*Attribute{}
	}
	s.registerAttribute("blocking", value)
	return s
}

/*
Crossorigin -
*/
func (s *ScriptTagHtml) Crossorigin(value string) *ScriptTagHtml {
	if s.attributes == nil {
		s.attributes = []*Attribute{}
	}
	s.registerAttribute("crossorigin", value)
	return s
}

/*
Defer -
*/
func (s *ScriptTagHtml) Defer() *ScriptTagHtml {
	if s.attributes == nil {
		s.attributes = []*Attribute{}
	}
	s.registerAttribute("defer", "")
	return s
}

/*
Fetchpriority -
*/
func (s *ScriptTagHtml) Fetchpriority(value string) *ScriptTagHtml {
	if s.attributes == nil {
		s.attributes = []*Attribute{}
	}
	s.registerAttribute("fetchpriority", value)
	return s
}

/*
Integrity -
*/
func (s *ScriptTagHtml) Integrity(value string) *ScriptTagHtml {
	if s.attributes == nil {
		s.attributes = []*Attribute{}
	}
	s.registerAttribute("integrity", value)
	return s
}

/*
Nomodule -
*/
func (s *ScriptTagHtml) Nomodule(value string) *ScriptTagHtml {
	if s.attributes == nil {
		s.attributes = []*Attribute{}
	}
	s.registerAttribute("nomodule", value)
	return s
}

/*
Referrerpolicy -
*/
func (s *ScriptTagHtml) Referrerpolicy(value string) *ScriptTagHtml {
	if s.attributes == nil {
		s.attributes = []*Attribute{}
	}
	s.registerAttribute("referrerpolicy", value)
	return s
}

/*
Src - Specifies the URL of an image.
Specifies the URL of an image.
*/
func (s *ScriptTagHtml) Src(value string) *ScriptTagHtml {
	if s.attributes == nil {
		s.attributes = []*Attribute{}
	}
	s.registerAttribute("src", value)
	return s
}

/*
Type - Specifies the type of an <input> element.
Specifies the type of an <input> element.
*/
func (s *ScriptTagHtml) Type(value string) *ScriptTagHtml {
	if s.attributes == nil {
		s.attributes = []*Attribute{}
	}
	s.registerAttribute("type", value)
	return s
}
